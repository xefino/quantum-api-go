// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: protos/frontend/assets/v1/service.proto

package v1

import (
	context "context"
	data "github.com/xefino/quantum-api-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetsService_QueryAssets_FullMethodName = "/protos.frontend.assets.v1.AssetsService/QueryAssets"
	AssetsService_GetAsset_FullMethodName    = "/protos.frontend.assets.v1.AssetsService/GetAsset"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsServiceClient interface {
	// Retrieves assets data associated with the filters contained in the request
	// object. This endpoint will not return a not-found response if no assets
	// could be found to conform to the request, instead returning no data.
	QueryAssets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (AssetsService_QueryAssetsClient, error)
	// Retrieves a specific asset associated with its ticker symbol. This endpoint
	// will return a not-found response if no asset could be found to conform to the
	// symbol provided in the request.
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*data.Asset, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) QueryAssets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (AssetsService_QueryAssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetsService_ServiceDesc.Streams[0], AssetsService_QueryAssets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assetsServiceQueryAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetsService_QueryAssetsClient interface {
	Recv() (*data.Asset, error)
	grpc.ClientStream
}

type assetsServiceQueryAssetsClient struct {
	grpc.ClientStream
}

func (x *assetsServiceQueryAssetsClient) Recv() (*data.Asset, error) {
	m := new(data.Asset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetsServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*data.Asset, error) {
	out := new(data.Asset)
	err := c.cc.Invoke(ctx, AssetsService_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility
type AssetsServiceServer interface {
	// Retrieves assets data associated with the filters contained in the request
	// object. This endpoint will not return a not-found response if no assets
	// could be found to conform to the request, instead returning no data.
	QueryAssets(*QueryAssetsRequest, AssetsService_QueryAssetsServer) error
	// Retrieves a specific asset associated with its ticker symbol. This endpoint
	// will return a not-found response if no asset could be found to conform to the
	// symbol provided in the request.
	GetAsset(context.Context, *GetAssetRequest) (*data.Asset, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsServiceServer struct {
}

func (UnimplementedAssetsServiceServer) QueryAssets(*QueryAssetsRequest, AssetsService_QueryAssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryAssets not implemented")
}
func (UnimplementedAssetsServiceServer) GetAsset(context.Context, *GetAssetRequest) (*data.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_QueryAssets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryAssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetsServiceServer).QueryAssets(m, &assetsServiceQueryAssetsServer{stream})
}

type AssetsService_QueryAssetsServer interface {
	Send(*data.Asset) error
	grpc.ServerStream
}

type assetsServiceQueryAssetsServer struct {
	grpc.ServerStream
}

func (x *assetsServiceQueryAssetsServer) Send(m *data.Asset) error {
	return x.ServerStream.SendMsg(m)
}

func _AssetsService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.frontend.assets.v1.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAsset",
			Handler:    _AssetsService_GetAsset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryAssets",
			Handler:       _AssetsService_QueryAssets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/frontend/assets/v1/service.proto",
}

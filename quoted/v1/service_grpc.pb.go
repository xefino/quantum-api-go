// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/frontend/quoted/v1/service.proto

package v1

import (
	context "context"
	data "github.com/xefino/quantum-api-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	// Retrieves the quotes data associated with a given asset symbol, ordered chronologically. This
	// endpoint will not return a not-found response if the symbol wasn't associated with any known
	// value. instead, an empty list will be streamed to the client. A bad request response will be
	// returned if the symbol is empty or if the start time is after the end time.
	GetQuotesForAsset(ctx context.Context, in *GetQuotesForAssetRequest, opts ...grpc.CallOption) (QuoteService_GetQuotesForAssetClient, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) GetQuotesForAsset(ctx context.Context, in *GetQuotesForAssetRequest, opts ...grpc.CallOption) (QuoteService_GetQuotesForAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuoteService_ServiceDesc.Streams[0], "/protos.frontend.quoted.v1.QuoteService/GetQuotesForAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteServiceGetQuotesForAssetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuoteService_GetQuotesForAssetClient interface {
	Recv() (*data.Quote, error)
	grpc.ClientStream
}

type quoteServiceGetQuotesForAssetClient struct {
	grpc.ClientStream
}

func (x *quoteServiceGetQuotesForAssetClient) Recv() (*data.Quote, error) {
	m := new(data.Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	// Retrieves the quotes data associated with a given asset symbol, ordered chronologically. This
	// endpoint will not return a not-found response if the symbol wasn't associated with any known
	// value. instead, an empty list will be streamed to the client. A bad request response will be
	// returned if the symbol is empty or if the start time is after the end time.
	GetQuotesForAsset(*GetQuotesForAssetRequest, QuoteService_GetQuotesForAssetServer) error
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) GetQuotesForAsset(*GetQuotesForAssetRequest, QuoteService_GetQuotesForAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotesForAsset not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_GetQuotesForAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQuotesForAssetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServiceServer).GetQuotesForAsset(m, &quoteServiceGetQuotesForAssetServer{stream})
}

type QuoteService_GetQuotesForAssetServer interface {
	Send(*data.Quote) error
	grpc.ServerStream
}

type quoteServiceGetQuotesForAssetServer struct {
	grpc.ServerStream
}

func (x *quoteServiceGetQuotesForAssetServer) Send(m *data.Quote) error {
	return x.ServerStream.SendMsg(m)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.frontend.quoted.v1.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuotesForAsset",
			Handler:       _QuoteService_GetQuotesForAsset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/frontend/quoted/v1/service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/ohlc/v1/service.proto

package v1

import (
	context "context"
	data "github.com/xefino/quantum-api-go/data"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OHLCClient is the client API for OHLC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OHLCClient interface {
	// Retrieves aggregated trading data over the time period, for the symbol and time frequency provided. This endpoint will not return
	// a not-found response if the symbol wasn't associated with any known value. instead, an empty list will be streamed to the client.
	// A bad-request response will be returned if the multiplier is negative, the frequency is invalid or the start time (from) comes after
	// the end time (to). If the time range contains part of a bar then request can contain a flag to either pull in that extra bar or
	// ignore it. This endpoint will adjust for splits by default. If this functionality is not necessary thn the associated flag should be set.
	Aggregates(ctx context.Context, in *GetAggregatesRequest, opts ...grpc.CallOption) (OHLC_AggregatesClient, error)
}

type oHLCClient struct {
	cc grpc.ClientConnInterface
}

func NewOHLCClient(cc grpc.ClientConnInterface) OHLCClient {
	return &oHLCClient{cc}
}

func (c *oHLCClient) Aggregates(ctx context.Context, in *GetAggregatesRequest, opts ...grpc.CallOption) (OHLC_AggregatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OHLC_ServiceDesc.Streams[0], "/quantumapi.ohlc.v1.OHLC/Aggregates", opts...)
	if err != nil {
		return nil, err
	}
	x := &oHLCAggregatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OHLC_AggregatesClient interface {
	Recv() (*data.Bar, error)
	grpc.ClientStream
}

type oHLCAggregatesClient struct {
	grpc.ClientStream
}

func (x *oHLCAggregatesClient) Recv() (*data.Bar, error) {
	m := new(data.Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OHLCServer is the server API for OHLC service.
// All implementations must embed UnimplementedOHLCServer
// for forward compatibility
type OHLCServer interface {
	// Retrieves aggregated trading data over the time period, for the symbol and time frequency provided. This endpoint will not return
	// a not-found response if the symbol wasn't associated with any known value. instead, an empty list will be streamed to the client.
	// A bad-request response will be returned if the multiplier is negative, the frequency is invalid or the start time (from) comes after
	// the end time (to). If the time range contains part of a bar then request can contain a flag to either pull in that extra bar or
	// ignore it. This endpoint will adjust for splits by default. If this functionality is not necessary thn the associated flag should be set.
	Aggregates(*GetAggregatesRequest, OHLC_AggregatesServer) error
	mustEmbedUnimplementedOHLCServer()
}

// UnimplementedOHLCServer must be embedded to have forward compatible implementations.
type UnimplementedOHLCServer struct {
}

func (UnimplementedOHLCServer) Aggregates(*GetAggregatesRequest, OHLC_AggregatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Aggregates not implemented")
}
func (UnimplementedOHLCServer) mustEmbedUnimplementedOHLCServer() {}

// UnsafeOHLCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OHLCServer will
// result in compilation errors.
type UnsafeOHLCServer interface {
	mustEmbedUnimplementedOHLCServer()
}

func RegisterOHLCServer(s grpc.ServiceRegistrar, srv OHLCServer) {
	s.RegisterService(&OHLC_ServiceDesc, srv)
}

func _OHLC_Aggregates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAggregatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OHLCServer).Aggregates(m, &oHLCAggregatesServer{stream})
}

type OHLC_AggregatesServer interface {
	Send(*data.Bar) error
	grpc.ServerStream
}

type oHLCAggregatesServer struct {
	grpc.ServerStream
}

func (x *oHLCAggregatesServer) Send(m *data.Bar) error {
	return x.ServerStream.SendMsg(m)
}

// OHLC_ServiceDesc is the grpc.ServiceDesc for OHLC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OHLC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quantumapi.ohlc.v1.OHLC",
	HandlerType: (*OHLCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Aggregates",
			Handler:       _OHLC_Aggregates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/ohlc/v1/service.proto",
}
